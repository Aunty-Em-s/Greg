// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// basic
const foo = bar<T>;

=====================================output=====================================
// basic
const foo = bar<T>;

================================================================================
`;

exports[`binary-expr.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
new A < B >
C

=====================================output=====================================
new A() < B > C;

================================================================================
`;

exports[`inferface-asi.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface Example {
  (a: number): typeof a
      
  <T>(): void
};

=====================================output=====================================
interface Example {
  (a: number): typeof a;

  <T>(): void;
}

================================================================================
`;

exports[`new.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// new
new A<T>;

=====================================output=====================================
// new
new A<T>();

================================================================================
`;

exports[`typeof.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let x: typeof y.z<w>;

=====================================output=====================================
let x: typeof y.z<w>;

================================================================================
`;

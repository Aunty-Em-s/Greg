// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}

=====================================output=====================================
type Covariant<out T> = {
  x: T;
};
type Contravariant<in T> = {
  f: (x: T) => void;
};
type Invariant<in out T> = {
  f: (x: T) => T;
};
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
  x: T;
};

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
  f: (x: T) => void;
};

type Invariant1<in T> = {
  f: (x: T) => T;
};

type Invariant2<out T> = {
  f: (x: T) => T;
};
type Foo1<in T> = {
  x: T;
  f: FooFn1<T>;
};

type Foo2<out T> = {
  x: T;
  f: FooFn2<T>;
};

type Foo3<in out T> = {
  x: T;
  f: FooFn3<T>;
};

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
  child: Child<A> | null;
  parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
  _storedEvent: TEvent;
  _action: ActionObject<TEvent>;
  _state: StateNode<TContext, any>;
}

================================================================================
`;

exports[`with-jsx.tsx [babel-ts] format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// valid JSX
<in T>() => {}</in>;

type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}

=====================================output=====================================
// valid JSX
<in T>() => {}</in>;

type Covariant<out T> = {
  x: T;
};
type Contravariant<in T> = {
  f: (x: T) => void;
};
type Invariant<in out T> = {
  f: (x: T) => T;
};
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
  x: T;
};

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
  f: (x: T) => void;
};

type Invariant1<in T> = {
  f: (x: T) => T;
};

type Invariant2<out T> = {
  f: (x: T) => T;
};
type Foo1<in T> = {
  x: T;
  f: FooFn1<T>;
};

type Foo2<out T> = {
  x: T;
  f: FooFn2<T>;
};

type Foo3<in out T> = {
  x: T;
  f: FooFn3<T>;
};

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
  child: Child<A> | null;
  parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
  _storedEvent: TEvent;
  _action: ActionObject<TEvent>;
  _state: StateNode<TContext, any>;
}

================================================================================
`;

exports[`with-jsx.tsx [typescript] format 1`] = `
"Unexpected token. Did you mean \`{'>'}\` or \`&gt;\`? (2:11)
  1 | // valid JSX
> 2 | <in T>() => {}</in>;
    |           ^
  3 |
  4 | type Covariant<out T> = {
  5 |     x: T;"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declare-index-signature.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Invalid, but recoverable
class C {
  declare [key: string]: string;
}

=====================================output=====================================
// Invalid, but recoverable
class C {
  declare [key: string]: string;
}

================================================================================
`;

exports[`invalid-modifiers.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface Foo {
  private a();
  public b();
  protected c();
  static d();
  declare e();
  abstract f();
  readonly g();
}

class Bar {
  declare e() {};
  readonly g() {};
}

=====================================output=====================================
interface Foo {
  private a();
  public b();
  protected c();
  static d();
  declare e();
  abstract f();
  readonly g();
}

class Bar {
  declare e() {}
  readonly g() {}
}

================================================================================
`;

exports[`parenthesized-decorators-call-expression.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
@(test().x("global").y())
class X {}

=====================================output=====================================
@(test().x("global").y())
class X {}

================================================================================
`;

exports[`parenthesized-decorators-tagged-template.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class Test {
  @(foo\`bar\`)
  text: string = "text"
}

=====================================output=====================================
class Test {
  @(foo\`bar\`)
  text: string = "text";
}

================================================================================
`;

exports[`prettier-ignore-nested-unions.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export type a =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  // prettier-ignore
  | (
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | baz1&baz2;

export type b =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  | (
    // prettier-ignore
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | baz1&baz2;

=====================================output=====================================
export type a =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  // prettier-ignore
  | (
    | aaaaaaaaaaaaa&1
    // b
    | bbbbbbbbbbbbb&2
  )
  // baz
  | (baz1 & baz2);

export type b =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  | (
      | // prettier-ignore
      aaaaaaaaaaaaa&1
      // b
      | (bbbbbbbbbbbbb & 2)
    )
  // baz
  | (baz1 & baz2);

================================================================================
`;

exports[`prettier-ignore-parenthesized-type.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Foo =
  // prettier-ignore
  (
    aa
  );

=====================================output=====================================
type Foo =
  // prettier-ignore
  (
    aa
  );

================================================================================
`;

exports[`tuple-labeled-ts.ts format 1`] = `
====================================options=====================================
parsers: ["babel-ts"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Invalid label 1
type T = [x.y: A];

// Invalid label 2
type T = [x<y>: A];

=====================================output=====================================
// Invalid label 1
type T = [x.y: A];

// Invalid label 2
type T = [x<y>: A];

================================================================================
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`abstract.ts - typescript-verify 1`] = `
abstract interface I {

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
abstract interface I {}

`;

exports[`abstract.ts - typescript-verify 2`] = `
abstract interface I {

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
abstract interface I {}

`;

exports[`comments.js - typescript-verify 1`] = `
interface ScreenObject {
	// I make things weird.
	at(point: Point): Screen | undefined;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface ScreenObject {
  // I make things weird.
  at(point: Point): Screen | undefined;
}

`;

exports[`comments.js - typescript-verify 2`] = `
interface ScreenObject {
	// I make things weird.
	at(point: Point): Screen | undefined;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface ScreenObject {
  // I make things weird.
  at(point: Point): Screen | undefined
}

`;

exports[`ignore.js - typescript-verify 1`] = `
interface Interface {
  // prettier-ignore
  prop: type
  // prettier-ignore
  prop: type;
  prop: type;
}

// Last element
interface Interface {
  // prettier-ignore
  prop: type
  prop: type
}

interface foo extends bar {
  // prettier-ignore
  f(): void;
  // prettier-ignore
  g(): void;
  h(): void;
}

interface T<T> {
  // prettier-ignore
  new<T>(): T<T>;
  new<T>(): T<T>;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface Interface {
  // prettier-ignore
  prop: type
  // prettier-ignore
  prop: type;
  prop: type;
}

// Last element
interface Interface {
  // prettier-ignore
  prop: type
  prop: type;
}

interface foo extends bar {
  // prettier-ignore
  f(): void;
  // prettier-ignore
  g(): void;
  h(): void;
}

interface T<T> {
  // prettier-ignore
  new<T>(): T<T>;
  new <T>(): T<T>;
}

`;

exports[`ignore.js - typescript-verify 2`] = `
interface Interface {
  // prettier-ignore
  prop: type
  // prettier-ignore
  prop: type;
  prop: type;
}

// Last element
interface Interface {
  // prettier-ignore
  prop: type
  prop: type
}

interface foo extends bar {
  // prettier-ignore
  f(): void;
  // prettier-ignore
  g(): void;
  h(): void;
}

interface T<T> {
  // prettier-ignore
  new<T>(): T<T>;
  new<T>(): T<T>;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
interface Interface {
  // prettier-ignore
  prop: type
  // prettier-ignore
  prop: type;
  prop: type
}

// Last element
interface Interface {
  // prettier-ignore
  prop: type
  prop: type
}

interface foo extends bar {
  // prettier-ignore
  f(): void;
  // prettier-ignore
  g(): void;
  h(): void
}

interface T<T> {
  // prettier-ignore
  new<T>(): T<T>;
  new <T>(): T<T>
}

`;

exports[`long-extends.ts - typescript-verify 1`] = `
export interface I extends A, B, C {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends ALongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends ALongAndBoringInterfaceName, AnotherLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends AVeryLongAndBoringInterfaceName, AnotherVeryLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends A_AVeryLongAndBoringInterfaceName, B_AVeryLongAndBoringInterfaceName, C_AVeryLongAndBoringInterfaceName  {
  c: string;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export interface I extends A, B, C {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends ALongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends ALongAndBoringInterfaceName,
    AnotherLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends AVeryLongAndBoringInterfaceName,
    AnotherVeryLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends A_AVeryLongAndBoringInterfaceName,
    B_AVeryLongAndBoringInterfaceName,
    C_AVeryLongAndBoringInterfaceName {
  c: string;
}

`;

exports[`long-extends.ts - typescript-verify 2`] = `
export interface I extends A, B, C {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends ALongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends ALongAndBoringInterfaceName, AnotherLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends AVeryLongAndBoringInterfaceName, AnotherVeryLongAndBoringInterfaceName {
  c: string;
}

export interface ThirdVeryLongAndBoringInterfaceName extends A_AVeryLongAndBoringInterfaceName, B_AVeryLongAndBoringInterfaceName, C_AVeryLongAndBoringInterfaceName  {
  c: string;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
export interface I extends A, B, C {
  c: string
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends ALongAndBoringInterfaceName {
  c: string
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends ALongAndBoringInterfaceName,
    AnotherLongAndBoringInterfaceName {
  c: string
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends AVeryLongAndBoringInterfaceName,
    AnotherVeryLongAndBoringInterfaceName {
  c: string
}

export interface ThirdVeryLongAndBoringInterfaceName
  extends A_AVeryLongAndBoringInterfaceName,
    B_AVeryLongAndBoringInterfaceName,
    C_AVeryLongAndBoringInterfaceName {
  c: string
}

`;

exports[`separator.ts - typescript-verify 1`] = `
declare module 'selenium-webdriver' {
  export const until: {
    ableToSwitchToFrame(frame: number | WebElement | By): Condition<boolean>;
    alertIsPresent(): Condition<Alert>;
  };
}

export interface Edge {
  cursor: {};
  node: {
    id: {};
  };
}

interface Test { one: string, two: any[] }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
declare module "selenium-webdriver" {
  export const until: {
    ableToSwitchToFrame(frame: number | WebElement | By): Condition<boolean>;
    alertIsPresent(): Condition<Alert>;
  };
}

export interface Edge {
  cursor: {};
  node: {
    id: {};
  };
}

interface Test {
  one: string;
  two: any[];
}

`;

exports[`separator.ts - typescript-verify 2`] = `
declare module 'selenium-webdriver' {
  export const until: {
    ableToSwitchToFrame(frame: number | WebElement | By): Condition<boolean>;
    alertIsPresent(): Condition<Alert>;
  };
}

export interface Edge {
  cursor: {};
  node: {
    id: {};
  };
}

interface Test { one: string, two: any[] }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
declare module "selenium-webdriver" {
  export const until: {
    ableToSwitchToFrame(frame: number | WebElement | By): Condition<boolean>
    alertIsPresent(): Condition<Alert>
  }
}

export interface Edge {
  cursor: {}
  node: {
    id: {}
  }
}

interface Test {
  one: string
  two: any[]
}

`;

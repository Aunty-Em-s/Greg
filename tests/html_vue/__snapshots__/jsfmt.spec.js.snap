// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes.vue - vue-verify 1`] = `
<div
  v-for="  item  in  items "
  v-for="  item  of  items "
  v-for="(    item    , index)    in    items"
  v-for="value    in     object"
  v-for="(value,    key)    in    object"
  v-for="(value,    key)    of    object"
  v-for="(value  ,   key,   index)    in   object"
  v-for="   n    in   evenNumbers"
  v-for=" n in even   ( numbers) "
  v-for=" n    in    10"
  v-for=" { a }    in    [0].map(()=>({a:1}))   "
  v-for=" ({ a }, [c  ])    in    [0].map(()=>1)   "
  v-for=" n in items.map(x => { return x }) "
  @click="  /* hello */   "
  @click="   /* 1 */ $emit( /* 2 */ 'click' /* 3 */ ) /* 4 */ ; /* 5 */   "
  @click="   $emit(   'click'   )   "
  @click="   $emit(   'click'   )  ;"
  @click="   $emit(   'click'   )  ;if(something){for(let i=j;i<100;i++){}}else{}"
  slot-scope="{destructuring:{a:{b}}}"
  :class="{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }"
  :class="(() => { return 'hello' })()"
  :key="index /* hello */ "
  :key="index // hello "
  @click="() => {console.log(test)}"
  @click="
    () => {
      console.log(test);
    }
  "
></div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div
  v-for="item in items"
  v-for="item of items"
  v-for="(item, index) in items"
  v-for="value in object"
  v-for="(value, key) in object"
  v-for="(value, key) of object"
  v-for="(value, key, index) in object"
  v-for="n in evenNumbers"
  v-for="n in even(numbers)"
  v-for="n in 10"
  v-for="{ a } in [0].map(() => ({ a: 1 }))"
  v-for="({ a }, [c]) in [0].map(() => 1)"
  v-for="n in items.map(x => {
    return x;
  })"
  @click="/* hello */"
  @click="/* 1 */ $emit(/* 2 */ 'click' /* 3 */) /* 4 */; /* 5 */"
  @click="$emit('click');"
  @click="$emit('click');"
  @click="
    $emit('click');
    if (something) {
      for (let i = j; i < 100; i++) {}
    } else {
    }
  "
  slot-scope="{
    destructuring: {
      a: { b }
    }
  }"
  :class="{
    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true
  }"
  :class="
    (() => {
      return 'hello';
    })()
  "
  :key="index /* hello */"
  :key="
    index // hello
  "
  @click="
    () => {
      console.log(test);
    }
  "
  @click="
    () => {
      console.log(test);
    }
  "
></div>

`;

exports[`attributes.vue - vue-verify 2`] = `
<div
  v-for="  item  in  items "
  v-for="  item  of  items "
  v-for="(    item    , index)    in    items"
  v-for="value    in     object"
  v-for="(value,    key)    in    object"
  v-for="(value,    key)    of    object"
  v-for="(value  ,   key,   index)    in   object"
  v-for="   n    in   evenNumbers"
  v-for=" n in even   ( numbers) "
  v-for=" n    in    10"
  v-for=" { a }    in    [0].map(()=>({a:1}))   "
  v-for=" ({ a }, [c  ])    in    [0].map(()=>1)   "
  v-for=" n in items.map(x => { return x }) "
  @click="  /* hello */   "
  @click="   /* 1 */ $emit( /* 2 */ 'click' /* 3 */ ) /* 4 */ ; /* 5 */   "
  @click="   $emit(   'click'   )   "
  @click="   $emit(   'click'   )  ;"
  @click="   $emit(   'click'   )  ;if(something){for(let i=j;i<100;i++){}}else{}"
  slot-scope="{destructuring:{a:{b}}}"
  :class="{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }"
  :class="(() => { return 'hello' })()"
  :key="index /* hello */ "
  :key="index // hello "
  @click="() => {console.log(test)}"
  @click="
    () => {
      console.log(test);
    }
  "
></div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div
  v-for="item in items"
  v-for="item of items"
  v-for="(item, index) in items"
  v-for="value in object"
  v-for="(value, key) in object"
  v-for="(value, key) of object"
  v-for="(value, key, index) in object"
  v-for="n in evenNumbers"
  v-for="n in even(numbers)"
  v-for="n in 10"
  v-for="{ a } in [0].map(() => ({ a: 1 }))"
  v-for="({ a }, [c]) in [0].map(() => 1)"
  v-for="n in items.map(x => {
    return x;
  })"
  @click="/* hello */"
  @click="/* 1 */ $emit(/* 2 */ 'click' /* 3 */) /* 4 */; /* 5 */"
  @click="$emit('click');"
  @click="$emit('click');"
  @click="
    $emit('click');
    if (something) {
      for (let i = j; i < 100; i++) {}
    } else {
    }
  "
  slot-scope="{
    destructuring: {
      a: { b },
    },
  }"
  :class="{
    longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true,
  }"
  :class="
    (() => {
      return 'hello';
    })()
  "
  :key="index /* hello */"
  :key="
    index // hello
  "
  @click="
    () => {
      console.log(test);
    }
  "
  @click="
    () => {
      console.log(test);
    }
  "
></div>

`;

exports[`board_card.vue - vue-verify 1`] = `
<script>
import './issue_card_inner';
import eventHub from '../eventhub';

const Store = gl.issueBoards.BoardsStore;

export default {
  name: 'BoardsIssueCard',
  components: {
    'issue-card-inner': gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains('js-no-trigger')) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit('clearDetailIssue');
        } else {
          eventHub.$emit('newDetailIssue', this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li class="card"
    :class="{ 'user-can-drag': !disabled && issue.id, 'is-disabled': disabled || !issue.id, 'is-active': issueDetailVisible }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)">
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true" />
  </li>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script>
import "./issue_card_inner";
import eventHub from "../eventhub";

const Store = gl.issueBoards.BoardsStore;

export default {
  name: "BoardsIssueCard",
  components: {
    "issue-card-inner": gl.issueBoards.IssueCardInner
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    }
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains("js-no-trigger")) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit("clearDetailIssue");
        } else {
          eventHub.$emit("newDetailIssue", this.issue);
          Store.detail.list = this.list;
        }
      }
    }
  }
};
</script>

<template>
  <li
    class="card"
    :class="{
      'user-can-drag': !disabled && issue.id,
      'is-disabled': disabled || !issue.id,
      'is-active': issueDetailVisible
    }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event);"
  >
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true"
    />
  </li>
</template>

`;

exports[`board_card.vue - vue-verify 2`] = `
<script>
import './issue_card_inner';
import eventHub from '../eventhub';

const Store = gl.issueBoards.BoardsStore;

export default {
  name: 'BoardsIssueCard',
  components: {
    'issue-card-inner': gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains('js-no-trigger')) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit('clearDetailIssue');
        } else {
          eventHub.$emit('newDetailIssue', this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li class="card"
    :class="{ 'user-can-drag': !disabled && issue.id, 'is-disabled': disabled || !issue.id, 'is-active': issueDetailVisible }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)">
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true" />
  </li>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script>
import "./issue_card_inner";
import eventHub from "../eventhub";

const Store = gl.issueBoards.BoardsStore;

export default {
  name: "BoardsIssueCard",
  components: {
    "issue-card-inner": gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains("js-no-trigger")) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit("clearDetailIssue");
        } else {
          eventHub.$emit("newDetailIssue", this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li
    class="card"
    :class="{
      'user-can-drag': !disabled && issue.id,
      'is-disabled': disabled || !issue.id,
      'is-active': issueDetailVisible,
    }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event);"
  >
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true"
    />
  </li>
</template>

`;

exports[`filter.vue - vue-verify 1`] = `
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">{{value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird}}</div>
  <div class="allowed" v-bind:something='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="allowed" :class='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="not-allowed" v-if='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">
    {{
      value
        | thisIsARealSuperLongFilterPipe("arg1", arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    }}
  </div>
  <div
    class="allowed"
    v-bind:something="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="allowed"
    :class="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="not-allowed"
    v-if="
      value |
        thisIsARealSuperLongFilterPipe('arg1', arg2) |
        anotherPipeLongJustForFun |
        pipeTheThird
    "
  ></div>
</template>

`;

exports[`filter.vue - vue-verify 2`] = `
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">{{value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird}}</div>
  <div class="allowed" v-bind:something='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="allowed" :class='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="not-allowed" v-if='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">
    {{
      value
        | thisIsARealSuperLongFilterPipe("arg1", arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    }}
  </div>
  <div
    class="allowed"
    v-bind:something="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="allowed"
    :class="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="not-allowed"
    v-if="
      value |
        thisIsARealSuperLongFilterPipe('arg1', arg2) |
        anotherPipeLongJustForFun |
        pipeTheThird
    "
  ></div>
</template>

`;

exports[`interpolations.vue - vue-verify 1`] = `
<div>Fuga magnam facilis. Voluptatem quaerat porro.{{


x => {
    const hello = 'world'
    return hello;
}



}} Magni consectetur in et molestias neque esse voluptatibus voluptas. {{  
    
    
    some_variable 



}} Eum quia nihil nulla esse. Dolorem asperiores vero est error {{

                    preserve

                    invalid
                    
                    interpolation

}} reprehenderit voluptates minus {{console.log(  short_interpolation )}} nemo.</div>

<script type="text/jsx">
  export default {
    render (h) {
      return (
        <ul
          class={{
            'a': b,
            'c': d,
            "e": f
          }}
        >
          { this.xyz }
        </ul>
    )
  };
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }} 1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }} 1234567890
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>
  Fuga magnam facilis. Voluptatem quaerat porro.{{
    x => {
      const hello = "world";
      return hello;
    }
  }}
  Magni consectetur in et molestias neque esse voluptatibus voluptas.
  {{ some_variable }} Eum quia nihil nulla esse. Dolorem asperiores vero est
  error
  {{

                    preserve

                    invalid
                    
                    interpolation

  }}
  reprehenderit voluptates minus {{ console.log(short_interpolation) }} nemo.
</div>

<script type="text/jsx">
export default {
  render (h) {
    return (
      <ul
        class={{
          'a': b,
          'c': d,
          "e": f
        }}
      >
        { this.xyz }
      </ul>
  )
};
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{
    something
  }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890
  {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{
    something
  }}
  1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890
  {{ something }} 1234567890
</div>

`;

exports[`interpolations.vue - vue-verify 2`] = `
<div>Fuga magnam facilis. Voluptatem quaerat porro.{{


x => {
    const hello = 'world'
    return hello;
}



}} Magni consectetur in et molestias neque esse voluptatibus voluptas. {{  
    
    
    some_variable 



}} Eum quia nihil nulla esse. Dolorem asperiores vero est error {{

                    preserve

                    invalid
                    
                    interpolation

}} reprehenderit voluptates minus {{console.log(  short_interpolation )}} nemo.</div>

<script type="text/jsx">
  export default {
    render (h) {
      return (
        <ul
          class={{
            'a': b,
            'c': d,
            "e": f
          }}
        >
          { this.xyz }
        </ul>
    )
  };
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }} 1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }} 1234567890
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<div>
  Fuga magnam facilis. Voluptatem quaerat porro.{{
    x => {
      const hello = "world";
      return hello;
    }
  }}
  Magni consectetur in et molestias neque esse voluptatibus voluptas.
  {{ some_variable }} Eum quia nihil nulla esse. Dolorem asperiores vero est
  error
  {{

                    preserve

                    invalid
                    
                    interpolation

  }}
  reprehenderit voluptates minus {{ console.log(short_interpolation) }} nemo.
</div>

<script type="text/jsx">
export default {
  render (h) {
    return (
      <ul
        class={{
          'a': b,
          'c': d,
          "e": f
        }}
      >
        { this.xyz }
      </ul>
  )
};
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{
    something
  }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890
  {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{
    something
  }}
  1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890
  {{ something }} 1234567890
</div>

`;

exports[`pre-child.vue - vue-verify 1`] = `
<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
<pre
  ref="buildTrace"
  class="build-trace mb-0 h-100"
  @scroll="scrollBuildLog"
>
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
<pre class='woot'>
  {{ stuff }}
  </pre>
</template>

<template>
<pre class='woot'>
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
    </pre>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue
-->
<pre ref="buildTrace" class="build-trace mb-0 h-100" @scroll="scrollBuildLog">
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>

<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue
-->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
  <pre class="woot">
  {{ stuff }}
  </pre>
</template>

<template>
  <pre class="woot">
  123{{
      wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq
    }}123
  123{{
      wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq
    }}123
    </pre
  >
</template>

`;

exports[`pre-child.vue - vue-verify 2`] = `
<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
<pre
  ref="buildTrace"
  class="build-trace mb-0 h-100"
  @scroll="scrollBuildLog"
>
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
<pre class='woot'>
  {{ stuff }}
  </pre>
</template>

<template>
<pre class='woot'>
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
    </pre>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue
-->
<pre ref="buildTrace" class="build-trace mb-0 h-100" @scroll="scrollBuildLog">
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>

<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue
-->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
  <pre class="woot">
  {{ stuff }}
  </pre>
</template>

<template>
  <pre class="woot">
  123{{
      wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq
    }}123
  123{{
      wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq ||
        wqeqwwqwqweqweqwewwq
    }}123
    </pre
  >
</template>

`;

exports[`script_src.vue - vue-verify 1`] = `
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

`;

exports[`script_src.vue - vue-verify 2`] = `
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

`;

exports[`self_closing.vue - vue-verify 1`] = `
<template>
  <div />
</template>

<script>
foo( )
</script>

<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template>
  <div />
</template>

<script>
foo();
</script>

<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>

`;

exports[`self_closing.vue - vue-verify 2`] = `
<template>
  <div />
</template>

<script>
foo( )
</script>

<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template>
  <div />
</template>

<script>
foo();
</script>

<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>

`;

exports[`self_closing_style.vue - vue-verify 1`] = `
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

`;

exports[`self_closing_style.vue - vue-verify 2`] = `
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

`;

exports[`template.vue - vue-verify 1`] = `
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"/>
      <p
        v-if="renderInfo"
        class="file-info prepend-top-10">
        <template v-if="fileSize>0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize>0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue
-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"
      />
      <p v-if="renderInfo" class="file-info prepend-top-10">
        <template v-if="fileSize > 0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize > 0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

`;

exports[`template.vue - vue-verify 2`] = `
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"/>
      <p
        v-if="renderInfo"
        class="file-info prepend-top-10">
        <template v-if="fileSize>0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize>0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--
  copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue
-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"
      />
      <p v-if="renderInfo" class="file-info prepend-top-10">
        <template v-if="fileSize > 0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize > 0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

`;

exports[`template-lang.vue - vue-verify 1`] = `
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template 


   
   lang='pug'>
  .test
    #foo
  .bla
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="pug">
  .test
    #foo
  .bla
</template>

`;

exports[`template-lang.vue - vue-verify 2`] = `
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template 


   
   lang='pug'>
  .test
    #foo
  .bla
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="pug">
  .test
    #foo
  .bla
</template>

`;

exports[`test.vue - vue-verify 1`] = `
<script>
</script>

<template>
  <br />
  <footer>
    foo
    <br/>
  </footer>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script></script>

<template>
  <br />
  <footer>foo <br /></footer>
</template>

`;

exports[`test.vue - vue-verify 2`] = `
<script>
</script>

<template>
  <br />
  <footer>
    foo
    <br/>
  </footer>
</template>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<script></script>

<template>
  <br />
  <footer>foo <br /></footer>
</template>

`;
